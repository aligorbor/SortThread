//---------------------------------------------------------------------------

#include <System.hpp>
#pragma hdrstop

#include "thrdUnit.h"
#pragma package(smart_init)
//---------------------------------------------------------------------------

//   Important: Methods and properties of objects in VCL can only be
//   used in a method called using Synchronize, for example:
//
//      Synchronize(&UpdateCaption);
//
//   where UpdateCaption could look like:
//
//      void __fastcall TMyThread::UpdateCaption()
//      {
//        Form1->Caption = "Updated in a thread";
//      }
//---------------------------------------------------------------------------

bool UseSynchronize;
bool UseQueue;
bool useMutex;
int mysleep;
TMutex *myMutex;


void __fastcall PaintLine(TCanvas *Canvas, int i, int len)
{
  Canvas->MoveTo(1, int(i/2.22)+1);
  Canvas->LineTo(int(len/2.92)+1, int(i/2.22)+1);
}
//---------------------------------------------------------------------------
 int ASize(TSortArray &A)
{
  return sizeof(A)/sizeof(int);
}
//---------------------------------------------------------------------------

/* TSortThread */

/*
Notice that it is handy to have WaitBeforePaint be a member of the thread base class TSortThread.
This allows Synchronize calls to ConflictMsg from inside of WaitBeforePaint, something that would
not be possible for a proc outside of the thread classes.  This means that there are three instances
of WaitBeforePaint running, but we still get the contention we are looking for over the global counter mysleep.
*/

void __fastcall TSortThread::WaitBeforePaint()
{
  int supersleep;
  if (mysleep != 0)
  {
	Synchronize(ConflictMsg);
	Terminate();
	return;
  };

  mysleep = 50000;
  while (mysleep > 0) // use a process intensive loop here.  We are trying to block.
  {
	supersleep  = mysleep*mysleep;
	mysleep  = mysleep - 1;
  };
};

/* Since DoVisualSwap uses a VCL component (i.e., the TPaintBox) it should never
be called directly by this thread.  DoVisualSwap should be called by passing it
to the Synchronize method which causes DoVisualSwap to be executed by the main VCL
 thread, avoiding multi-thread conflicts. */

//---------------------------------------------------------------------------

void __fastcall TSortThread::ConflictMsg()
{
	MessageDlg(Format("Conflict! mysleep = %d.",
	  ARRAYOFCONST((mysleep))), mtError, TMsgDlgButtons() << mbOK, 0);
}

void __fastcall TSortThread::DoVisualSwap()
{
  FBox->Canvas->Pen->Color = clBtnFace;
  PaintLine(FBox->Canvas, FI, FA);
  PaintLine(FBox->Canvas, FJ, FB);
  FBox->Canvas->Pen->Color = clRed;
  PaintLine(FBox->Canvas, FI, FB);
  PaintLine(FBox->Canvas, FJ, FA);
}

/* VisusalSwap is a wrapper on DoVisualSwap, used to decide how to call the shared
non-VCL resource inside of Synchronize, Queue or the mutex.
*/

//---------------------------------------------------------------------------

void __fastcall TSortThread::VisualSwap(int a, int b, int i, int j)
{
  FA = a;
  FB = b;
  FI = i;
  FJ = j;

  // shared resource that is not VCL
   if (useMutex)
	myMutex->Acquire();
  if (UseSynchronize) Synchronize(WaitBeforePaint);
  else
  {
	if (UseQueue) Queue(WaitBeforePaint);
	else WaitBeforePaint();
  }
  if (useMutex) myMutex->Release();

  Synchronize(DoVisualSwap);
}



//---------------------------------------------------------------------------
void __fastcall TSortThread::Sort(TSortArray &)
{
}
//---------------------------------------------------------------------------

__fastcall TSortThread::TSortThread(TPaintBox *Box, TSortArray &SortArray, bool CreateSuspended)
	: TThread(CreateSuspended)
{
  FBox = Box;
  FSize = ASize(SortArray);
  for(int i=0; i<FSize; ++i) {
	  FSortArray[i] = SortArray[i];
  }
  FreeOnTerminate = true;

}
//---------------------------------------------------------------------------
void __fastcall TSortThread::Execute()
{
  //	NameThreadForDebugging(System::String(L"MyThread1"));
     TThread::NameThreadForDebugging((AnsiString)ClassName());
	 Sort(&FSortArray);

	//---- Place thread code here ----


}
//---------------------------------------------------------------------------
